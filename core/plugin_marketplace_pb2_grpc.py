# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import plugin_marketplace_pb2 as plugin__marketplace__pb2


class PluginMarketplaceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListPlugins = channel.unary_unary(
                '/aiswa.PluginMarketplace/ListPlugins',
                request_serializer=plugin__marketplace__pb2.Empty.SerializeToString,
                response_deserializer=plugin__marketplace__pb2.PluginList.FromString,
                )
        self.DownloadPlugin = channel.unary_unary(
                '/aiswa.PluginMarketplace/DownloadPlugin',
                request_serializer=plugin__marketplace__pb2.PluginRequest.SerializeToString,
                response_deserializer=plugin__marketplace__pb2.PluginData.FromString,
                )


class PluginMarketplaceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListPlugins(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadPlugin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PluginMarketplaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListPlugins': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPlugins,
                    request_deserializer=plugin__marketplace__pb2.Empty.FromString,
                    response_serializer=plugin__marketplace__pb2.PluginList.SerializeToString,
            ),
            'DownloadPlugin': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadPlugin,
                    request_deserializer=plugin__marketplace__pb2.PluginRequest.FromString,
                    response_serializer=plugin__marketplace__pb2.PluginData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aiswa.PluginMarketplace', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PluginMarketplace(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListPlugins(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aiswa.PluginMarketplace/ListPlugins',
            plugin__marketplace__pb2.Empty.SerializeToString,
            plugin__marketplace__pb2.PluginList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadPlugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aiswa.PluginMarketplace/DownloadPlugin',
            plugin__marketplace__pb2.PluginRequest.SerializeToString,
            plugin__marketplace__pb2.PluginData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
