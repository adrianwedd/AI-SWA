version: '3'
services:
  orchestrator:
    build:
      context: .
      dockerfile: orchestrator/Dockerfile
    volumes:
      - ./tasks.yml:/app/tasks.yml
      - ./state.json:/app/state.json
      - ./config.yaml:/app/config.yaml
    environment:
      BROKER_URL: http://broker:8000
      WORKER_METRICS_PORT: "9001"
      BROKER_METRICS_PORT: "9000"
      OTEL_EXPORTER_OTLP_ENDPOINT: https://otel-collector:4317
      OTEL_EXPORTER_OTLP_CERTIFICATE: /certs/ca.crt
      JAEGER_ENDPOINT: http://jaeger:4317
    depends_on:
      - broker
      - worker
      - io-service
    volumes:
      - ./observability/certs:/certs:ro
  broker:
    build:
      context: .
      dockerfile: broker/Dockerfile
    environment:
      DB_PATH: /data/tasks.db
      BROKER_METRICS_PORT: "9000"
      OTEL_EXPORTER_OTLP_ENDPOINT: https://otel-collector:4317
      OTEL_EXPORTER_OTLP_CERTIFICATE: /certs/ca.crt
      JAEGER_ENDPOINT: http://jaeger:4317
    volumes:
      - broker-data:/data
      - ./observability/certs:/certs:ro
    ports:
      - "8000:8000"
      - "9000:9000"
  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    environment:
      BROKER_URL: http://broker:8000
      WORKER_METRICS_PORT: "9001"
      OTEL_EXPORTER_OTLP_ENDPOINT: https://otel-collector:4317
      OTEL_EXPORTER_OTLP_CERTIFICATE: /certs/ca.crt
      JAEGER_ENDPOINT: http://jaeger:4317
    depends_on:
      - broker
    volumes:
      - ./observability/certs:/certs:ro
    ports:
      - "9001:9001"
  orchestrator-api:
    build:
      context: .
      dockerfile: orchestrator_api/Dockerfile
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: https://otel-collector:4317
      OTEL_EXPORTER_OTLP_CERTIFICATE: /certs/ca.crt
      JAEGER_ENDPOINT: http://jaeger:4317
    depends_on:
      - orchestrator
    volumes:
      - ./observability/certs:/certs:ro
    ports:
      - "8002:8002"
  api-gateway:
    build:
      context: .
      dockerfile: api_gateway/Dockerfile
    environment:
      BROKER_URL: http://broker:8000
      ORCH_URL: http://orchestrator-api:8002
      OTEL_EXPORTER_OTLP_ENDPOINT: https://otel-collector:4317
      OTEL_EXPORTER_OTLP_CERTIFICATE: /certs/ca.crt
      JAEGER_ENDPOINT: http://jaeger:4317
    depends_on:
      - broker
      - orchestrator-api
    volumes:
      - ./observability/certs:/certs:ro
    ports:
      - "8080:8080"
  io-service:
    build: ./services/node
    environment:
      PORT: "50051"
      METRICS_PORT: "9100"
      OTEL_EXPORTER_OTLP_ENDPOINT: https://otel-collector:4317
      OTEL_EXPORTER_OTLP_CERTIFICATE: /certs/ca.crt
      JAEGER_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9100/health"]
      interval: 5s
      timeout: 2s
      retries: 3
    ports:
      - "50051:50051"
      - "9100:9100"
    volumes:
      - node-data:/data
      - ./observability/certs:/certs:ro

  plugin-marketplace:
    build:
      context: .
      dockerfile: plugin_marketplace/Dockerfile
    environment:
      NODE_ENV: production
      JAEGER_ENDPOINT: http://jaeger:4317
      OTEL_EXPORTER_OTLP_ENDPOINT: https://otel-collector:4317
      OTEL_EXPORTER_OTLP_CERTIFICATE: /certs/ca.crt
    volumes:
      - ./observability/certs:/certs:ro
    ports:
      - "8003:8003"
      - "50052:50052"

  otel-collector:
    image: otel/opentelemetry-collector:0.93.0
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./observability/otel-collector.yaml:/etc/otelcol/config.yaml:ro
      - ./observability/certs:/certs:ro
    ports:
      - "4317:4317"
      - "8889:8889"
    healthcheck:
      test: ["CMD", "otelcol", "--version"]
      interval: 30s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.52.0
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./observability/certs:/certs:ro
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:10.4.2
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./observability/certs:/certs:ro
    environment:
      GF_SERVER_PROTOCOL: https
      GF_SERVER_CERT_FILE: /certs/collector.crt
      GF_SERVER_CERT_KEY: /certs/collector.key
    depends_on:
      - prometheus
    ports:
      - "3000:3000"

  jaeger:
    image: jaegertracing/all-in-one:1.57
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"   # UI
      - "4317:4317"     # OTLP gRPC

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

volumes:
  broker-data:
  node-data:
